package Lexer;

/* The following code was generated by JFlex 1.6.1 */

import java.util.HashMap;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 */
public class ImpLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\4\1\47\1\47\1\3\22\0\1\0\1\0\1\46"+
    "\2\0\1\25\2\0\1\6\1\10\1\7\1\22\1\0\1\23\1\0"+
    "\1\24\1\5\11\2\1\20\1\17\1\33\1\21\1\32\2\0\32\1"+
    "\1\0\1\50\4\0\1\30\1\11\1\44\1\16\1\12\1\34\1\13"+
    "\1\35\1\14\2\1\1\36\1\42\1\15\1\26\1\45\1\1\1\31"+
    "\1\37\1\27\1\43\1\1\1\40\1\1\1\41\1\1\12\0\1\47"+
    "\u1fa2\0\1\47\1\47\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\5\2\1\10\1\1\1\11\1\12\1\13\1\14"+
    "\1\15\4\2\1\16\1\17\4\2\1\20\1\4\1\1"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\2\1\27"+
    "\2\2\1\30\1\31\1\2\1\32\1\33\1\34\1\35"+
    "\3\2\1\36\1\37\1\40\7\2\1\41\1\42\1\43"+
    "\1\44\1\45\1\2\1\46\1\2\1\47\2\2\1\50"+
    "\2\2\1\51\11\2\1\52\1\53\1\54\1\2\1\55"+
    "\1\56\1\57\1\60\1\2\1\61\1\2\1\62\1\63"+
    "\2\2\1\64\1\65\1\2\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\173\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\173\0\u0267\0\173\0\173\0\173\0\173\0\173\0\u0290"+
    "\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8"+
    "\0\u0401\0\173\0\173\0\u042a\0\u0453\0\173\0\u047c\0\u011f"+
    "\0\173\0\173\0\u04a5\0\244\0\u04ce\0\u04f7\0\244\0\244"+
    "\0\u0520\0\u0549\0\173\0\244\0\244\0\u0572\0\u059b\0\u05c4"+
    "\0\173\0\173\0\173\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691"+
    "\0\u06ba\0\u06e3\0\173\0\173\0\173\0\173\0\173\0\u070c"+
    "\0\u0735\0\u075e\0\244\0\u0787\0\u07b0\0\244\0\u07d9\0\u0802"+
    "\0\244\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921"+
    "\0\u094a\0\u0973\0\244\0\244\0\244\0\u099c\0\244\0\244"+
    "\0\244\0\244\0\u09c5\0\244\0\u09ee\0\244\0\244\0\u0a17"+
    "\0\u0a40\0\244\0\244\0\u0a69\0\244\0\244";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\4\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\5\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\3\5\1\37\3\5"+
    "\1\40\1\41\1\42\1\43\4\4\2\43\2\4\1\44"+
    "\37\4\1\43\1\4\3\45\2\43\41\45\1\46\1\45"+
    "\1\47\52\0\2\5\2\0\1\5\3\0\6\5\7\0"+
    "\4\5\2\0\12\5\5\0\1\6\2\0\1\6\47\0"+
    "\1\4\46\0\1\50\2\0\1\50\52\0\1\51\51\0"+
    "\1\52\41\0\2\5\2\0\1\5\3\0\1\5\1\53"+
    "\4\5\7\0\4\5\2\0\5\5\1\54\4\5\4\0"+
    "\2\5\2\0\1\5\3\0\4\5\1\55\1\5\7\0"+
    "\4\5\2\0\2\5\1\56\7\5\4\0\2\5\2\0"+
    "\1\5\3\0\4\5\1\57\1\5\7\0\4\5\2\0"+
    "\1\60\11\5\4\0\2\5\2\0\1\5\3\0\6\5"+
    "\7\0\1\61\3\5\2\0\12\5\4\0\2\5\2\0"+
    "\1\5\3\0\6\5\7\0\1\62\3\5\2\0\12\5"+
    "\24\0\1\63\30\0\2\5\2\0\1\5\3\0\6\5"+
    "\7\0\3\5\1\64\2\0\12\5\4\0\2\5\2\0"+
    "\1\5\3\0\6\5\7\0\1\65\3\5\2\0\1\5"+
    "\1\66\10\5\4\0\2\5\2\0\1\5\3\0\4\5"+
    "\1\67\1\5\7\0\4\5\2\0\12\5\4\0\2\5"+
    "\2\0\1\5\3\0\1\5\1\70\4\5\7\0\4\5"+
    "\2\0\12\5\24\0\1\71\50\0\1\72\10\0\1\73"+
    "\17\0\2\5\2\0\1\5\3\0\6\5\7\0\1\74"+
    "\2\5\1\75\2\0\7\5\1\76\2\5\4\0\2\5"+
    "\2\0\1\5\3\0\3\5\1\77\2\5\7\0\4\5"+
    "\2\0\1\5\1\100\10\5\4\0\2\5\2\0\1\5"+
    "\3\0\6\5\7\0\2\5\1\101\1\5\2\0\12\5"+
    "\4\0\2\5\2\0\1\5\3\0\6\5\7\0\3\5"+
    "\1\102\2\0\12\5\13\0\1\103\40\0\3\45\2\0"+
    "\41\45\1\0\1\45\16\0\1\104\11\0\1\105\1\0"+
    "\1\106\14\0\1\107\3\0\2\5\2\0\1\5\3\0"+
    "\2\5\1\110\3\5\7\0\4\5\2\0\12\5\4\0"+
    "\2\5\2\0\1\5\3\0\5\5\1\111\7\0\4\5"+
    "\2\0\12\5\4\0\2\5\2\0\1\5\3\0\6\5"+
    "\7\0\4\5\2\0\3\5\1\112\6\5\4\0\2\5"+
    "\2\0\1\5\3\0\6\5\7\0\1\5\1\113\2\5"+
    "\2\0\12\5\4\0\2\5\2\0\1\5\3\0\4\5"+
    "\1\114\1\5\7\0\4\5\2\0\12\5\4\0\2\5"+
    "\2\0\1\5\3\0\1\5\1\115\4\5\7\0\4\5"+
    "\2\0\12\5\4\0\2\5\2\0\1\5\3\0\5\5"+
    "\1\116\7\0\4\5\2\0\12\5\4\0\2\5\2\0"+
    "\1\5\3\0\6\5\7\0\1\5\1\117\1\120\1\5"+
    "\2\0\12\5\4\0\2\5\2\0\1\5\3\0\6\5"+
    "\7\0\3\5\1\121\2\0\12\5\4\0\2\5\2\0"+
    "\1\5\3\0\6\5\7\0\1\122\3\5\2\0\12\5"+
    "\4\0\2\5\2\0\1\5\3\0\4\5\1\123\1\5"+
    "\7\0\4\5\2\0\12\5\4\0\2\5\2\0\1\5"+
    "\3\0\6\5\7\0\1\5\1\124\2\5\2\0\12\5"+
    "\4\0\2\5\2\0\1\5\3\0\3\5\1\125\2\5"+
    "\7\0\4\5\2\0\12\5\4\0\2\5\2\0\1\5"+
    "\3\0\6\5\7\0\4\5\2\0\2\5\1\126\7\5"+
    "\4\0\2\5\2\0\1\5\3\0\3\5\1\127\2\5"+
    "\7\0\4\5\2\0\12\5\4\0\2\5\2\0\1\5"+
    "\3\0\3\5\1\130\2\5\7\0\4\5\2\0\12\5"+
    "\4\0\2\5\2\0\1\5\3\0\3\5\1\131\2\5"+
    "\7\0\4\5\2\0\1\132\11\5\4\0\2\5\2\0"+
    "\1\5\3\0\1\5\1\133\4\5\7\0\4\5\2\0"+
    "\12\5\4\0\2\5\2\0\1\5\3\0\1\5\1\134"+
    "\4\5\7\0\4\5\2\0\12\5\4\0\2\5\2\0"+
    "\1\5\3\0\4\5\1\135\1\5\7\0\4\5\2\0"+
    "\12\5\4\0\2\5\2\0\1\5\3\0\6\5\7\0"+
    "\4\5\2\0\7\5\1\136\2\5\4\0\2\5\2\0"+
    "\1\5\3\0\5\5\1\137\7\0\4\5\2\0\12\5"+
    "\4\0\2\5\2\0\1\5\3\0\6\5\7\0\4\5"+
    "\2\0\6\5\1\140\3\5\4\0\2\5\2\0\1\5"+
    "\3\0\6\5\7\0\4\5\2\0\10\5\1\141\1\5"+
    "\4\0\2\5\2\0\1\5\3\0\6\5\7\0\4\5"+
    "\2\0\1\5\1\142\10\5\4\0\2\5\2\0\1\5"+
    "\3\0\6\5\7\0\4\5\2\0\2\5\1\143\7\5"+
    "\4\0\2\5\2\0\1\5\3\0\6\5\7\0\4\5"+
    "\2\0\2\5\1\144\7\5\4\0\2\5\2\0\1\5"+
    "\3\0\4\5\1\145\1\5\7\0\4\5\2\0\12\5"+
    "\4\0\2\5\2\0\1\5\3\0\4\5\1\146\1\5"+
    "\7\0\4\5\2\0\12\5\4\0\2\5\2\0\1\5"+
    "\3\0\6\5\7\0\4\5\2\0\1\147\11\5\4\0"+
    "\2\5\2\0\1\5\3\0\6\5\7\0\4\5\2\0"+
    "\7\5\1\150\2\5\4\0\2\5\2\0\1\5\3\0"+
    "\6\5\7\0\3\5\1\151\2\0\12\5\4\0\2\5"+
    "\2\0\1\5\3\0\1\5\1\152\4\5\7\0\4\5"+
    "\2\0\12\5\4\0\2\5\2\0\1\5\3\0\6\5"+
    "\7\0\1\5\1\153\2\5\2\0\12\5\4\0\2\5"+
    "\2\0\1\5\3\0\4\5\1\154\1\5\7\0\4\5"+
    "\2\0\12\5\4\0\2\5\2\0\1\5\3\0\4\5"+
    "\1\155\1\5\7\0\4\5\2\0\12\5\4\0\2\5"+
    "\2\0\1\5\3\0\6\5\7\0\4\5\2\0\10\5"+
    "\1\156\1\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2706];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\6\1\1\11\5\1\1\11\1\1\5\11"+
    "\12\1\2\11\2\1\1\11\2\1\2\11\10\1\1\11"+
    "\5\1\3\11\7\1\5\11\47\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public HashMap<String,Integer> identifiersTable = new HashMap<String,Integer>();

	private Symbol symbol(LexicalUnit unit,int line,int column,Object value){
		Symbol sym = new Symbol(unit,line, column, value ); 
		// System.out.println(sym.toString()); 
		return sym; 
	}
	
	StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ImpLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	/*System.out.println("\nIdentifiers");

	ArrayList<String> ids = new ArrayList<String>(identifiersTable.keySet());
	Collections.sort(ids, String.CASE_INSENSITIVE_ORDER);

	for(String id : ids) {
 		System.out.println(id + " " + identifiersTable.get(id));
	}*/

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(LexicalUnit.EOS, yyline, yycolumn, "[EOS]");
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 56: break;
          case 2: 
            { Symbol sym = symbol(LexicalUnit.VARNAME, yyline, yycolumn, yytext() ); 
		if(!identifiersTable.containsKey(yytext())){
			identifiersTable.put(yytext(), yyline+1);
		}
		return sym;
            }
          case 57: break;
          case 3: 
            { return symbol(LexicalUnit.NUMBER, yyline, yycolumn, new Integer(yytext()));
            }
          case 58: break;
          case 4: 
            { System.out.print(yytext());
            }
          case 59: break;
          case 5: 
            { return symbol(LexicalUnit.LPAREN,yyline, yycolumn, yytext() );
            }
          case 60: break;
          case 6: 
            { return symbol(LexicalUnit.TIMES,yyline, yycolumn, yytext() );
            }
          case 61: break;
          case 7: 
            { return symbol(LexicalUnit.RPAREN,yyline, yycolumn, yytext() );
            }
          case 62: break;
          case 8: 
            { return symbol(LexicalUnit.SEMICOLON,yyline, yycolumn, yytext() );
            }
          case 63: break;
          case 9: 
            { return symbol(LexicalUnit.EQ,yyline, yycolumn, yytext() );
            }
          case 64: break;
          case 10: 
            { return symbol(LexicalUnit.PLUS,yyline, yycolumn, yytext() );
            }
          case 65: break;
          case 11: 
            { return symbol(LexicalUnit.MINUS,yyline, yycolumn, yytext() );
            }
          case 66: break;
          case 12: 
            { return symbol(LexicalUnit.DIVIDE,yyline, yycolumn, yytext() );
            }
          case 67: break;
          case 13: 
            { return symbol(LexicalUnit.REM,yyline, yycolumn, yytext() );
            }
          case 68: break;
          case 14: 
            { return symbol(LexicalUnit.GT,yyline, yycolumn, yytext() );
            }
          case 69: break;
          case 15: 
            { return symbol(LexicalUnit.LT,yyline, yycolumn, yytext() );
            }
          case 70: break;
          case 16: 
            { string.setLength(0); yybegin(STRING);
            }
          case 71: break;
          case 17: 
            { string.append( yytext() );
            }
          case 72: break;
          case 18: 
            { yybegin(YYINITIAL); 
                                       return symbol(LexicalUnit.STRING, yyline, yycolumn,
                                       string.toString());
            }
          case 73: break;
          case 19: 
            { string.append('\\');
            }
          case 74: break;
          case 20: 
            { System.out.println("Warning: numbers with leading zeros are deprecated."); 
		return symbol(LexicalUnit.NUMBER, yyline, yycolumn, new Integer(yytext()));
            }
          case 75: break;
          case 21: 
            { yybegin(COMMENT);
            }
          case 76: break;
          case 22: 
            { System.out.println("Error: unmatched (*");
            }
          case 77: break;
          case 23: 
            { return symbol(LexicalUnit.BY,yyline, yycolumn, yytext() );
            }
          case 78: break;
          case 24: 
            { return symbol(LexicalUnit.IN, yyline, yycolumn, yytext() );
            }
          case 79: break;
          case 25: 
            { return symbol(LexicalUnit.IF,yyline, yycolumn, yytext() );
            }
          case 80: break;
          case 26: 
            { return symbol(LexicalUnit.DO,yyline, yycolumn, yytext() );
            }
          case 81: break;
          case 27: 
            { return symbol(LexicalUnit.ASSIGN,yyline, yycolumn, yytext() );
            }
          case 82: break;
          case 28: 
            { return symbol(LexicalUnit.OR,yyline, yycolumn, yytext() );
            }
          case 83: break;
          case 29: 
            { return symbol(LexicalUnit.TO,yyline, yycolumn, yytext() );
            }
          case 84: break;
          case 30: 
            { return symbol(LexicalUnit.GEQ,yyline, yycolumn, yytext() );
            }
          case 85: break;
          case 31: 
            { return symbol(LexicalUnit.LEQ,yyline, yycolumn, yytext() );
            }
          case 86: break;
          case 32: 
            { return symbol(LexicalUnit.NEQ,yyline, yycolumn, yytext() );
            }
          case 87: break;
          case 33: 
            { yybegin(YYINITIAL);
            }
          case 88: break;
          case 34: 
            { string.append('\n');
            }
          case 89: break;
          case 35: 
            { string.append('\t');
            }
          case 90: break;
          case 36: 
            { string.append('\r');
            }
          case 91: break;
          case 37: 
            { string.append('\"');
            }
          case 92: break;
          case 38: 
            { return symbol(LexicalUnit.END,yyline, yycolumn, yytext() );
            }
          case 93: break;
          case 39: 
            { return symbol(LexicalUnit.NOT,yyline, yycolumn, yytext() );
            }
          case 94: break;
          case 40: 
            { return symbol(LexicalUnit.AND,yyline, yycolumn, yytext() );
            }
          case 95: break;
          case 41: 
            { return symbol(LexicalUnit.FOR,yyline, yycolumn, yytext() );
            }
          case 96: break;
          case 42: 
            { return symbol(LexicalUnit.ELSE,yyline, yycolumn, yytext() );
            }
          case 97: break;
          case 43: 
            { return symbol(LexicalUnit.DONE,yyline, yycolumn, yytext() );
            }
          case 98: break;
          case 44: 
            { return symbol(LexicalUnit.THEN,yyline, yycolumn, yytext() );
            }
          case 99: break;
          case 45: 
            { return symbol(LexicalUnit.READ, yyline, yycolumn, yytext() );
            }
          case 100: break;
          case 46: 
            { return symbol(LexicalUnit.FROM, yyline, yycolumn, yytext() );
            }
          case 101: break;
          case 47: 
            { return symbol(LexicalUnit.FUNC,yyline, yycolumn, yytext() );
            }
          case 102: break;
          case 48: 
            { return symbol(LexicalUnit.WITH, yyline, yycolumn, yytext() );
            }
          case 103: break;
          case 49: 
            { return symbol(LexicalUnit.CALL, yyline, yycolumn, yytext() );
            }
          case 104: break;
          case 50: 
            { return symbol(LexicalUnit.BEGIN,yyline, yycolumn, yytext() );
            }
          case 105: break;
          case 51: 
            { return symbol(LexicalUnit.ENDIF,yyline, yycolumn, yytext() );
            }
          case 106: break;
          case 52: 
            { return symbol(LexicalUnit.WHILE,yyline, yycolumn, yytext() );
            }
          case 107: break;
          case 53: 
            { return symbol(LexicalUnit.PRINT, yyline, yycolumn, yytext() );
            }
          case 108: break;
          case 54: 
            { return symbol(LexicalUnit.RETURN, yyline, yycolumn, yytext() );
            }
          case 109: break;
          case 55: 
            { return symbol(LexicalUnit.ENDFUNC,yyline, yycolumn, yytext() );
            }
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ImpLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        ImpLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new ImpLexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
