func isPrime with n in
  rtnValue := -1;
  if n = 1 then
    rtnValue := 0
  endif;
  if n = 2 then
    rtnValue := 1
  else 
    if n = 3 then
      rtnValue := 1
  
    else 
      if n % 2 = 0 then
        rtnValue := 0
  
      else 
        if n % 3 = 0 then
          rtnValue := 0
        endif
      endif
    endif
  endif;

  if rtnValue = -1 then
    i := 5;
    w := 2;

    while i*i <= n and n % i <> 0 do
      i := i + w;
      w := 6 - w
    done;

    if n % i = 0 and i*i <= n then
      rtnValue := 0
    else
      rtnValue := 1
    endif
  endif

  return rtnValue

endfunc
func assertEqual with value expectedValue in
  rtnValue := 1;
  if value = expectedValue then
    print(".")
  else
    rtnValue := 0;
    print("\nTest error : \"");
    print(value);
    print("\" is different from\"");
    print(expectedValue);
    print("\n")
  endif
  return rtnValue
endfunc
func testIsPrime with in
  a := call isPrime(1);
  call assertEqual(a, 0);
  a := call isPrime(2);
  call assertEqual(a, 1);
  a := call isPrime(3);
  call assertEqual(a, 1);
  a := call isPrime(4);
  call assertEqual(a, 0);
  a := call isPrime(5);
  call assertEqual(a, 1);
  a := call isPrime(7);
  call assertEqual(a, 1);
  a := call isPrime(10);
  call assertEqual(a, 0);
  a := call isPrime(9);
  call assertEqual(a, 0);
  a := call isPrime(15485863);
  call assertEqual(a, 1);
  a := call isPrime(15485869);
  call assertEqual(a, 0);

  a := call isPrime(11);
  call assertEqual(a, 1);
  a := call isPrime(13);
  call assertEqual(a, 1);
  a := call isPrime(17);
  call assertEqual(a, 1);
  a := call isPrime(19);
  call assertEqual(a, 1);
  a := call isPrime(23);
  call assertEqual(a, 1);
  a := call isPrime(25);
  call assertEqual(a, 0);
  a := call isPrime(50);
  call assertEqual(a, 0);

  print("\n")
endfunc

begin
  call testIsPrime()
end